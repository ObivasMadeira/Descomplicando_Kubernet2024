Vamos falar de deployment

YAML para o deploy de 3 replicas do nginx

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: nginx-deployment
  name: nginx-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx-deployment
  strategy: {}
  template:
    metadata:
      labels:
        app: nginx-deployment
    spec:
      containers:
      - image: nginx
        name: nginx
        resources:
          limits:
            cpu: "500m"
            memory: 256Mi
          requests:
            cpu: "300m"
            memory: 128Mi

kubectl get deployments.apps
NAME               READY   UP-TO-DATE   AVAILABLE   AGE
nginx-deployment   3/3     3            3           113s
root@obi-System-Product-Name:~/k8s/day3#

kubectl get deployments.apps -o yaml
apiVersion: v1
items:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"nginx-deployment"},"name":"nginx-deployment","namespace":"default"},"spec":{"replicas":3,"selector":{"matchLabels":{"app":"nginx-deployment"}},"strategy":{},"template":{"metadata":{"labels":{"app":"nginx-deployment"}},"spec":{"containers":[{"image":"nginx","name":"nginx","resources":{"limits":{"cpu":"500m","memory":"256Mi"},"requests":{"cpu":"300m","memory":"128Mi"}}}]}}}}
    creationTimestamp: "2024-05-23T01:19:03Z"
    generation: 1
    labels:
      app: nginx-deployment
    name: nginx-deployment
    namespace: default
    resourceVersion: "10627"
    uid: 281b8650-fc75-4c80-99ea-a8c96f59fb06
  spec:
    progressDeadlineSeconds: 600
    replicas: 3
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: nginx-deployment
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: nginx-deployment
      spec:
        containers:
        - image: nginx
          imagePullPolicy: Always
          name: nginx
          resources:
            limits:
              cpu: 500m
              memory: 256Mi
            requests:
              cpu: 300m
              memory: 128Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 3
    conditions:
    - lastTransitionTime: "2024-05-23T01:19:12Z"
      lastUpdateTime: "2024-05-23T01:19:12Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-05-23T01:19:03Z"
      lastUpdateTime: "2024-05-23T01:19:12Z"
      message: ReplicaSet "nginx-deployment-9bb44bfdb" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 3
    replicas: 3
    updatedReplicas: 3
kind: List
metadata:
  resourceVersion: ""


Trazer somente os pods que utilizando a label criada no deployment (app=nginx-deployment)
kubectl get pods -l app=nginx-deployment
NAME                               READY   STATUS    RESTARTS   AGE
nginx-deployment-9bb44bfdb-9nkg5   1/1     Running   0          5m25s
nginx-deployment-9bb44bfdb-tr7bb   1/1     Running   0          5m25s
nginx-deployment-9bb44bfdb-w8rs2   1/1     Running   0          5m25s

kubectl get replicasets (esse é o cara que é consultado para saber se esta ok com as replicas, replicasets)
NAME                         DESIRED   CURRENT   READY   AGE
nginx-deployment-9bb44bfdb   3         3         3       7m2s
