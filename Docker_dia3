Comando utilizado para verificar uma porta está em uso

ss -atunp | grep 6379 (porta do redis)

===============================================================================
Criando melhores imagens, mais seguras e mais performáticas.

Imagem de uma aplicação python

FROM python:3.8-alpine ## imagem utilizada para compactar o tamanho da imagem
WORKDIR /app
COPY . /app
RUN pip install --no-cache-dir -r requirements.txt
EXPOSE 5000
ENV REDIS_HOST=172.17.0.2
ENTRYPOINT ["python", "-m", "flask", "run", "--host=0.0.0.0"]

===================================================================================

Imagem do redis para essa aplicação

FROM debian:buster AS builder
RUN apt-get update && apt-get install -y redis-server
RUN apt-get install -y libatomic1

FROM debian:buster
COPY --from=builder /usr/bin/redis* /usr/bin/
ENV REDIS_HOST localhost
CMD ["redis-server", "--bind", "0.0.0.0"]

====================================================================================
Comando para verificar quantas camadas tem sua imagem
docker history obivas/linuxtips-giropops-senhas:1.0

IMAGE          CREATED        CREATED BY                                      SIZE      COMMENT
7d323585f2e2   4 days ago     ENTRYPOINT ["python" "-m" "flask" "run" "--h…   0B        buildkit.dockerfile.v0
<missing>      4 days ago     ENV REDIS_HOST=172.17.0.2                       0B        buildkit.dockerfile.v0
<missing>      4 days ago     RUN /bin/sh -c pip install -r requirements.t…   14MB      buildkit.dockerfile.v0
<missing>      4 days ago     COPY . /app # buildkit                          344kB     buildkit.dockerfile.v0
<missing>      4 days ago     WORKDIR /app                                    0B        buildkit.dockerfile.v0
<missing>      2 weeks ago    CMD ["python3"]                                 0B        buildkit.dockerfile.v0
<missing>      2 weeks ago    RUN /bin/sh -c set -eux;   wget -O get-pip.p…   9.91MB    buildkit.dockerfile.v0
<missing>      2 weeks ago    ENV PYTHON_GET_PIP_SHA256=dfe9fd5c28dc98b5ac…   0B        buildkit.dockerfile.v0
<missing>      2 weeks ago    ENV PYTHON_GET_PIP_URL=https://github.com/py…   0B        buildkit.dockerfile.v0
<missing>      2 weeks ago    ENV PYTHON_SETUPTOOLS_VERSION=57.5.0            0B        buildkit.dockerfile.v0
<missing>      2 weeks ago    ENV PYTHON_PIP_VERSION=23.0.1                   0B        buildkit.dockerfile.v0
<missing>      2 weeks ago    RUN /bin/sh -c set -eux;  for src in idle3 p…   0B        buildkit.dockerfile.v0
<missing>      2 weeks ago    RUN /bin/sh -c set -eux;   apk add --no-cach…   28.7MB    buildkit.dockerfile.v0
<missing>      2 weeks ago    ENV PYTHON_VERSION=3.8.19                       0B        buildkit.dockerfile.v0
<missing>      2 weeks ago    ENV GPG_KEY=E3FF2839C048B25C084DEBE9B26995E3…   0B        buildkit.dockerfile.v0
<missing>      2 weeks ago    RUN /bin/sh -c set -eux;  apk add --no-cache…   1.63MB    buildkit.dockerfile.v0
<missing>      2 weeks ago    ENV LANG=C.UTF-8                                0B        buildkit.dockerfile.v0
<missing>      2 weeks ago    ENV PATH=/usr/local/bin:/usr/local/sbin:/usr…   0B        buildkit.dockerfile.v0
<missing>      2 months ago   /bin/sh -c #(nop)  CMD ["/bin/sh"]              0B        
<missing>      2 months ago   /bin/sh -c #(nop) ADD file:37a76ec18f9887751…   7.37MB    

=====================================================================================
A Arte da Minimização: Imagens Distroless
Introdução
No mundo dos containers, existe uma tendência emergente chamada "Distroless". Este termo é um neologismo que descreve uma imagem de container que contém apenas as dependências e artefatos necessários para a execução do aplicativo, eliminando a distribuição completa do sistema operacional. Neste capítulo, exploraremos o conceito de distroless, suas vantagens, desvantagens e como implementá-lo em seu próprio ambiente.
O que é Distroless?
"Distroless" refere-se à estratégia de construir imagens de containers que são efetivamente "sem distribuição". Isso significa que elas não contêm a distribuição típica de um sistema operacional Linux, como shell de linha de comando, utilitários ou bibliotecas desnecessárias. Ao invés disso, essas imagens contêm apenas o ambiente de runtime (como Node.js, Python, Java, etc.) e o aplicativo em si.
Benefícios do Distroless
O principal benefício das imagens Distroless é a segurança. Ao excluir componentes não necessários, o potencial de ataque é significativamente reduzido. Além disso, sem as partes extras do sistema operacional, o tamanho do container é minimizado, economizando espaço de armazenamento e aumentando a velocidade de deploy.
Desafios do Distroless
Apesar de seus benefícios, a estratégia Distroless não está isenta de desafios. Sem um shell ou utilitários de sistema operacional, a depuração pode ser mais complicada. Além disso, a construção de imagens Distroless pode ser um pouco mais complexa, pois requer uma compreensão cuidadosa das dependências do aplicativo.
Implementando Distroless
Existem várias maneiras de implementar uma estratégia Distroless. A mais simples é usar uma das imagens base Distroless fornecidas pelo Google e pela Chainguard. Estas imagens são projetadas para serem o mais minimalistas possível e podem ser usadas como ponto de partida para a construção de suas próprias imagens de container.
Conclusão
Distroless representa uma evolução na maneira como pensamos sobre imagens de containers. Ele nos força a questionar o que realmente precisamos em nosso ambiente de execução e nos encoraja a minimizar o excesso. Embora a implementação de uma estratégia Distroless possa ser um desafio, os benefícios em termos de segurança e eficiência tornam essa uma consideração valiosa para qualquer equipe de desenvolvimento.
=======================================================================================
Usando a ferramenta trivy para analisar vunerabilidades
https://trivy.dev/

trivy image obivas/linuxtips-giropops-senhas:1.0
2024-04-08T22:45:19.006-0300	INFO	Vulnerability scanning is enabled
2024-04-08T22:45:19.006-0300	INFO	Secret scanning is enabled
2024-04-08T22:45:19.006-0300	INFO	If your scanning is slow, please try '--scanners vuln' to disable secret scanning
2024-04-08T22:45:19.006-0300	INFO	Please see also https://aquasecurity.github.io/trivy/v0.50/docs/scanner/secret/#recommendation for faster secret detection
2024-04-08T22:45:22.559-0300	INFO	Detected OS: alpine
2024-04-08T22:45:22.559-0300	INFO	Detecting Alpine vulnerabilities...
2024-04-08T22:45:22.618-0300	INFO	Number of language-specific files: 1
2024-04-08T22:45:22.618-0300	INFO	Detecting python-pkg vulnerabilities...

obivas/linuxtips-giropops-senhas:1.0 (alpine 3.19.1)

Total: 0 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

2024-04-08T22:45:22.666-0300	INFO	Table result includes only package filenames. Use '--format json' option to get the full path to the package file.

Python (python-pkg)

Total: 8 (UNKNOWN: 0, LOW: 2, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

┌───────────────────────┬────────────────┬──────────┬────────┬───────────────────┬─────────────────────┬──────────────────────────────────────────────────────────────┐
│        Library        │ Vulnerability  │ Severity │ Status │ Installed Version │    Fixed Version    │                            Title                             │
├───────────────────────┼────────────────┼──────────┼────────┼───────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────┤
│ Flask (METADATA)      │ CVE-2023-30861 │ HIGH     │ fixed  │ 2.1.1             │ 2.3.2, 2.2.5        │ flask: Possible disclosure of permanent session cookie due   │
│                       │                │          │        │                   │                     │ to missing Vary: Cookie...                                   │
│                       │                │          │        │                   │                     │ https://avd.aquasec.com/nvd/cve-2023-30861                   │
├───────────────────────┼────────────────┤          │        ├───────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────┤
│ Werkzeug (METADATA)   │ CVE-2023-25577 │          │        │ 2.2.2             │ 2.2.3               │ python-werkzeug: high resource usage when parsing multipart  │
│                       │                │          │        │                   │                     │ form data with many fields...                                │
│                       │                │          │        │                   │                     │ https://avd.aquasec.com/nvd/cve-2023-25577                   │
│                       ├────────────────┼──────────┤        │                   ├─────────────────────┼──────────────────────────────────────────────────────────────┤
│                       │ CVE-2023-46136 │ MEDIUM   │        │                   │ 3.0.1, 2.3.8        │ python-werkzeug: high resource consumption leading to denial │
│                       │                │          │        │                   │                     │ of service                                                   │
│                       │                │          │        │                   │                     │ https://avd.aquasec.com/nvd/cve-2023-46136                   │
│                       ├────────────────┼──────────┤        │                   ├─────────────────────┼──────────────────────────────────────────────────────────────┤
│                       │ CVE-2023-23934 │ LOW      │        │                   │ 2.2.3               │ python-werkzeug: cookie prefixed with = can shadow           │
│                       │                │          │        │                   │                     │ unprefixed cookie                                            │
│                       │                │          │        │                   │                     │ https://avd.aquasec.com/nvd/cve-2023-23934                   │
├───────────────────────┼────────────────┼──────────┤        ├───────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────┤
│ pip (METADATA)        │ CVE-2023-5752  │ MEDIUM   │        │ 23.0.1            │ 23.3                │ pip: Mercurial configuration injectable in repo revision     │
│                       │                │          │        │                   │                     │ when installing via pip                                      │
│                       │                │          │        │                   │                     │ https://avd.aquasec.com/nvd/cve-2023-5752                    │
├───────────────────────┼────────────────┤          │        ├───────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────┤
│ redis (METADATA)      │ CVE-2023-28859 │          │        │ 4.5.2             │ 4.5.4, 4.4.4        │ Async command information disclosure                         │
│                       │                │          │        │                   │                     │ https://avd.aquasec.com/nvd/cve-2023-28859                   │
│                       ├────────────────┼──────────┤        │                   ├─────────────────────┼──────────────────────────────────────────────────────────────┤
│                       │ CVE-2023-28858 │ LOW      │        │                   │ 4.4.3, 4.5.3, 4.3.6 │ Async command information disclosure                         │
│                       │                │          │        │                   │                     │ https://avd.aquasec.com/nvd/cve-2023-28858                   │
├───────────────────────┼────────────────┼──────────┤        ├───────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────┤
│ setuptools (METADATA) │ CVE-2022-40897 │ HIGH     │        │ 57.5.0            │ 65.5.1              │ pypa-setuptools: Regular Expression Denial of Service        │
│                       │                │          │        │                   │                     │ (ReDoS) in package_index.py                                  │
│                       │                │          │        │                   │                     │ https://avd.aquasec.com/nvd/cve-2022-40897                   │
└───────────────────────┴────────────────┴──────────┴────────┴───────────────────┴─────────────────────┴──────────────────────────────────────────────────────────────┘
=============================================================================================

Docker Scout 
À medida que o desenvolvimento de software se torna cada vez mais orientado para containers, a segurança desses containers e das imagens usadas para criá-los ganha importância crítica. As imagens de container são construídas a partir de camadas de outras imagens e pacotes de software. Infelizmente, essas camadas e pacotes podem conter vulnerabilidades que tornam os containers e os aplicativos que eles executam vulneráveis a ataques. Aqui é onde o Docker Scout entra em cena.
O que é o Docker Scout?
O Docker Scout é uma ferramenta de análise de imagens avançada oferecida pelo Docker. Ele foi projetado para ajudar desenvolvedores e equipes de operações a identificar e corrigir vulnerabilidades em suas imagens de containers. Ao analisar suas imagens, o Docker Scout cria um inventário completo dos pacotes e camadas, também conhecido como Software Bill of Materials (SBOM). Este inventário é então correlacionado com um banco de dados de vulnerabilidades atualizado continuamente para identificar possíveis problemas de segurança.
Como o Docker Scout funciona?
Você pode usar o Docker Scout de várias maneiras. Ele é integrado ao Docker Desktop e ao Docker Hub, facilitando a análise de imagens durante o processo de construção e implantação. Além disso, ele também pode ser usado em um pipeline de integração contínua, através da interface de linha de comando (CLI) do Docker e no Docker Scout Dashboard.
Para aqueles que hospedam suas imagens no JFrog Artifactory, o Docker Scout também oferece suporte à análise de imagens nesse ambiente.
No CLI do Docker, o Docker Scout oferece vários comandos, incluindo compare para comparar duas imagens, cves para exibir as vulnerabilidades conhecidas como CVEs identificadas em um artefato de software, quickview para uma visão geral rápida de uma imagem e recommendations para exibir atualizações de imagens base disponíveis e recomendações de correção.
Usando o Docker Scout
O comando docker scout cves é especialmente importante, pois permite analisar um artefato de software em busca de vulnerabilidades. Este comando suporta a análise de imagens, diretórios OCI layout e arquivos tarball, como os criados pelo comando docker save. Isso dá aos desenvolvedores a flexibilidade de verificar a segurança de suas imagens de container de várias maneiras.
Por que o Docker Scout é importante?
O Docker Scout é uma ferramenta valiosa para melhorar a segurança dos containers. Ao identificar proativamente as vulnerabilidades e fornecer correções recomendadas, ajuda as equipes de desenvolvimento a fortalecer suas imagens de containers e, por sua vez, os aplicativos que estão sendo executados nesses containers. Em um mundo onde a segurança do software é fundamental, o Docker Scout é uma ferramenta indispensável para qualquer equipe de desenvolvimento orientada a containers.
==================================================================================

Usando a ferramento cosing para assinar nossas imagens
instalando o cosing
# binary
curl -O -L "https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64"
sudo mv cosign-linux-amd64 /usr/local/bin/cosign
sudo chmod +x /usr/local/bin/cosign

Após instalar o mesmo vamos gerar o key-pair
cosing generate-key-pair

cosign generate-key-pair
Enter password for private key: 
Enter password for private key again: 
Private key written to cosign.key
Public key written to cosign.pub

Para assinar uma imagem é preciso estar no dockerhub
Após enviar a imagem para a dockerhub, vamos assinar a mesma usando o comando
cosign sign -key cosign.key obivas/giropops-senhas-assinada:1.0

Depois de assinar será criar uma chave shar no seu repositório junto com a imagem.

Verificar a imagem assinada, usamos o comando:

cosign verify --key cosign.pub obivas/giropops-senhas-assinada:1.0

Verification for index.docker.io/obivas/giropops-senhas-assinada:1.0 --
The following checks were performed on each of these signatures:
  - The cosign claims were validated
  - Existence of the claims in the transparency log was verified offline
  - The signatures were verified against the specified public key

[{"critical":{"identity":{"docker-reference":"index.docker.io/obivas/giropops-senhas-assinada"},"image":{"docker-manifest-digest":"sha256:40053a73da23d6886b172900a459a1b65a0b34cc772fbb0f922926eb6a79b69a"},"type":"cosign container image signature"},"optional":{"Bundle":{"SignedEntryTimestamp":"MEQCICATMDtgSSuTXj3gxOY6bQcicWzR25yW3X54BVHNBE7xAiAOqkYcin/dGugZWTgb+Xzy8zd4k6Sm+/Z9y3oCJhskaA==","Payload":{"body":"eyJhcGlWZXJzaW9uIjoiMC4wLjEiLCJraW5kIjoiaGFzaGVkcmVrb3JkIiwic3BlYyI6eyJkYXRhIjp7Imhhc2giOnsiYWxnb3JpdGhtIjoic2hhMjU2IiwidmFsdWUiOiI1MDRkNWE5NmM1ZjZlNDE1NTNlNzVhOTc5MzkwZjFkOTQ2NTFkOWZjMzA3NzdiMzU4Y2FkZmY1ZDBlNDFhNWZhIn19LCJzaWduYXR1cmUiOnsiY29udGVudCI6Ik1FVUNJR0huU1lnUG5uRjI3V1VuMUtTYUEwbTBSQ2RHV3NIRVlOcU5uUlNOSXpzbkFpRUE3TVhiNEFHb3cxK0pmV2MrZjlVczdZTjdFUENMV1NKbWRhME9GWllvU21RPSIsInB1YmxpY0tleSI6eyJjb250ZW50IjoiTFMwdExTMUNSVWRKVGlCUVZVSk1TVU1nUzBWWkxTMHRMUzBLVFVacmQwVjNXVWhMYjFwSmVtb3dRMEZSV1VsTGIxcEplbW93UkVGUlkwUlJaMEZGZVZWV0wya3haR3gzVVdaQksyNUVXV0pMTURkU1ZEaEhiemN3Y0FwQmNITktVMlJvV1RKeE9FbDNhMjR2TlRKTFlTdEtkMjF3YlhCeE5FeEVVa1ZIU3pONU9EQkdXbUpMTm5OaVUzbHpVQzlRWkhGdk5VMTNQVDBLTFMwdExTMUZUa1FnVUZWQ1RFbERJRXRGV1MwdExTMHRDZz09In19fX0=","integratedTime":1712689682,"logIndex":84425685,"logID":"c0d23d6ad406973f9559f3ba2d1ca01f84147d8ffc5b8445c224f98b9591801d"}}}}]

==========================================================================
IMagem dockerfile mais leve e mais segura usando o chainguard

FROM cgr.dev/chainguard/python:latest-dev as builder
WORKDIR /app
COPY ./giropops-senhas/requirements.txt .
RUN pip install --user --no-cache-dir -r requirements.txt

FROM cgr.dev/chainguard/python:latest
COPY --from=builder /home/nonroot/.local/lib/python3.12/site-packages /home/nonroot/.local/lib/python3.12/site-packages
COPY --from=builder /home/nonroot/.local/bin /home/nonroot/.local/bin
ENV PATH=PATH:/home/nonroot/.local/bin/

COPY ./giropops-senhas/app.py .
COPY ./giropops-senhas/templates templates/
COPY ./giropops-senhas/static static/
EXPOSE 5000
ENTRYPOINT [ "flask","run","--host=0.0.0.0" ]
========================================================
Introdução a volumes no Docker
Bom, volumes nada mais são que diretórios externos ao container, que são montados diretamente nele, e dessa forma bypassam seu filesystem, ou seja, não seguem aquele padrão de camadas que falamos. Decepcionei você? Que bom, sinal de que é bem simples e você não vai ter problemas para entender. :)
A principal função do volume é persistir os dados. Diferentemente do filesystem do container, que é volátil e toda informação escrita nele é perdida quando o container morre, quando você escreve em um volume aquele dado continua lá, independentemente do estado do container.
Existem algumas particularidades entre os volumes e containers que valem a pena ser mencionadas:
O volume é inicializado quando o container é criado.
Caso ocorra de já haver dados no diretório em que você está montando como volume, ou seja, se o diretório já existe e está "populado" na imagem base, aqueles dados serão copiados para o volume.
Um volume pode ser reusado e compartilhado entre containers.
Alterações em um volume são feitas diretamente no volume.
Alterações em um volume não irão com a imagem quando você fizer uma cópia ou snapshot de um container.
Volumes continuam a existir mesmo se você deletar o container.
Dito isso, chega de papo. Vamos aprender a adicionar um volume em um container.


